//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_test.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthRequest", Namespace="http://schemas.datacontract.org/2004/07/SoftwareLicenseServer.WebService.BL")]
    [System.SerializableAttribute()]
    public partial class AuthRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnersNIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnersNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppKey {
            get {
                return this.AppKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.AppKeyField, value) != true)) {
                    this.AppKeyField = value;
                    this.RaisePropertyChanged("AppKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppVersion {
            get {
                return this.AppVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.AppVersionField, value) != true)) {
                    this.AppVersionField = value;
                    this.RaisePropertyChanged("AppVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnersNIP {
            get {
                return this.OwnersNIPField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnersNIPField, value) != true)) {
                    this.OwnersNIPField = value;
                    this.RaisePropertyChanged("OwnersNIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnersName {
            get {
                return this.OwnersNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnersNameField, value) != true)) {
                    this.OwnersNameField = value;
                    this.RaisePropertyChanged("OwnersName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthResponse", Namespace="http://schemas.datacontract.org/2004/07/SoftwareLicenseServer.WebService.BL")]
    [System.SerializableAttribute()]
    public partial class AuthResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAuthorizedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthorized {
            get {
                return this.IsAuthorizedField;
            }
            set {
                if ((this.IsAuthorizedField.Equals(value) != true)) {
                    this.IsAuthorizedField = value;
                    this.RaisePropertyChanged("IsAuthorized");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILicenseService")]
    public interface ILicenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetAuthorization", ReplyAction="http://tempuri.org/ILicenseService/GetAuthorizationResponse")]
        Client_test.ServiceReference.AuthResponse GetAuthorization(Client_test.ServiceReference.AuthRequest authRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetAuthorization", ReplyAction="http://tempuri.org/ILicenseService/GetAuthorizationResponse")]
        System.Threading.Tasks.Task<Client_test.ServiceReference.AuthResponse> GetAuthorizationAsync(Client_test.ServiceReference.AuthRequest authRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/DownloadFile", ReplyAction="http://tempuri.org/ILicenseService/DownloadFileResponse")]
        byte[] DownloadFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/DownloadFile", ReplyAction="http://tempuri.org/ILicenseService/DownloadFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicenseServiceChannel : Client_test.ServiceReference.ILicenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceClient : System.ServiceModel.ClientBase<Client_test.ServiceReference.ILicenseService>, Client_test.ServiceReference.ILicenseService {
        
        public LicenseServiceClient() {
        }
        
        public LicenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client_test.ServiceReference.AuthResponse GetAuthorization(Client_test.ServiceReference.AuthRequest authRequest) {
            return base.Channel.GetAuthorization(authRequest);
        }
        
        public System.Threading.Tasks.Task<Client_test.ServiceReference.AuthResponse> GetAuthorizationAsync(Client_test.ServiceReference.AuthRequest authRequest) {
            return base.Channel.GetAuthorizationAsync(authRequest);
        }
        
        public byte[] DownloadFile(string fileName) {
            return base.Channel.DownloadFile(fileName);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string fileName) {
            return base.Channel.DownloadFileAsync(fileName);
        }
    }
}
